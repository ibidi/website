{"version":3,"file":"gallery-C7kWaYrW.js","sources":["../../../../components/PixelTransition.vue","../../../../pages/gallery.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"containerRef\"\n    :class=\"[\n      'pixel-transition-card relative overflow-hidden w-[300px] max-w-full rounded-[15px] border-2 border-white bg-[#222] text-white',\n      className\n    ]\"\n    :style=\"styleObject\"\n    @mouseenter=\"!isTouchDevice ? handleMouseEnter() : undefined\"\n    @mouseleave=\"!isTouchDevice ? handleMouseLeave() : undefined\"\n    @click=\"isTouchDevice ? handleClick() : undefined\"\n  >\n    <div :style=\"{ paddingTop: aspectRatio }\" />\n\n    <div class=\"absolute inset-0 w-full h-full\">\n      <slot name=\"firstContent\"></slot>\n    </div>\n\n    <div\n      ref=\"activeRef\"\n      class=\"absolute inset-0 w-full h-full z-[2]\"\n      style=\"display: none;\"\n    >\n      <slot name=\"secondContent\"></slot>\n    </div>\n\n    <div\n      ref=\"pixelGridRef\"\n      class=\"absolute inset-0 w-full h-full pointer-events-none z-[3]\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted, computed, CSSProperties } from 'vue';\nimport { gsap } from 'gsap';\n\ninterface Props {\n  gridSize?: number;\n  pixelColor?: string;\n  animationStepDuration?: number;\n  className?: string;\n  style?: CSSProperties;\n  aspectRatio?: string;\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  gridSize: 7,\n  pixelColor: 'currentColor',\n  animationStepDuration: 0.3,\n  className: '',\n  style: () => ({}),\n  aspectRatio: '100%',\n});\n\nconst containerRef = ref<HTMLDivElement | null>(null);\nconst pixelGridRef = ref<HTMLDivElement | null>(null);\nconst activeRef = ref<HTMLDivElement | null>(null);\nconst delayedCallRef = ref<gsap.core.Tween | null>(null);\n\nconst isActive = ref<boolean>(false);\nconst isTouchDevice = ref<boolean>(false);\n\nconst styleObject = computed(() => props.style);\n\nconst createPixelGrid = () => {\n  const pixelGridEl = pixelGridRef.value;\n  if (!pixelGridEl) return;\n\n  pixelGridEl.innerHTML = ''; // Clear previous pixels\n\n  for (let row = 0; row < props.gridSize; row++) {\n    for (let col = 0; col < props.gridSize; col++) {\n      const pixel = document.createElement('div');\n      pixel.classList.add('pixel-transition-card__pixel', 'absolute', 'hidden');\n      pixel.style.backgroundColor = props.pixelColor;\n\n      const size = 100 / props.gridSize;\n      pixel.style.width = `${size}%`;\n      pixel.style.height = `${size}%`;\n      pixel.style.left = `${col * size}%`;\n      pixel.style.top = `${row * size}%`;\n\n      pixelGridEl.appendChild(pixel);\n    }\n  }\n};\n\nonMounted(() => {\n  isTouchDevice.value =\n    'ontouchstart' in window ||\n    navigator.maxTouchPoints > 0 ||\n    window.matchMedia('(pointer: coarse)').matches;\n  \n  createPixelGrid();\n});\n\n// Recreate grid if gridSize or pixelColor changes\n// watch([() => props.gridSize, () => props.pixelColor], createPixelGrid);\n// For simplicity, assuming these don't change after mount for now.\n\nconst animatePixels = (activate: boolean): void => {\n  isActive.value = activate;\n\n  const pixelGridEl = pixelGridRef.value;\n  const activeEl = activeRef.value;\n  if (!pixelGridEl || !activeEl) return;\n\n  const pixels = pixelGridEl.querySelectorAll<HTMLDivElement>(\n    '.pixel-transition-card__pixel'\n  );\n  if (!pixels.length) return;\n\n  gsap.killTweensOf(pixels);\n  if (delayedCallRef.value) {\n    delayedCallRef.value.kill();\n  }\n\n  gsap.set(pixels, { display: 'none' });\n\n  const totalPixels = pixels.length;\n  const staggerDuration = props.animationStepDuration / totalPixels;\n\n  gsap.to(pixels, {\n    display: 'block',\n    duration: 0,\n    stagger: {\n      each: staggerDuration,\n      from: 'random',\n    },\n  });\n\n  delayedCallRef.value = gsap.delayedCall(props.animationStepDuration, () => {\n    if (activeEl) { // Ensure activeEl is still there\n        activeEl.style.display = activate ? 'block' : 'none';\n        activeEl.style.pointerEvents = activate ? 'none' : '';\n    }\n  });\n\n  gsap.to(pixels, {\n    display: 'none',\n    duration: 0,\n    delay: props.animationStepDuration,\n    stagger: {\n      each: staggerDuration,\n      from: 'random',\n    },\n  });\n};\n\nconst handleMouseEnter = (): void => {\n  if (!isActive.value) animatePixels(true);\n};\nconst handleMouseLeave = (): void => {\n  if (isActive.value) animatePixels(false);\n};\nconst handleClick = (): void => {\n  animatePixels(!isActive.value);\n};\n\nonUnmounted(() => {\n  if (delayedCallRef.value) {\n    delayedCallRef.value.kill();\n  }\n  // Kill any ongoing GSAP animations related to pixels if component is destroyed\n  const pixelGridEl = pixelGridRef.value;\n  if (pixelGridEl) {\n    const pixels = pixelGridEl.querySelectorAll<HTMLDivElement>('.pixel-transition-card__pixel');\n    if (pixels.length) {\n        gsap.killTweensOf(pixels);\n    }\n  }\n});\n\n</script>\n\n<style scoped>\n/* Scoped styles for the pixel itself if needed, though most is inline */\n.pixel-transition-card__pixel {\n  /* Base styles are set via JS */\n}\n</style>\n","<template>\n  <div class=\"relative pt-32 pb-16 bg-white dark:bg-zinc-900 overflow-hidden\">\n    <div class=\"container mx-auto max-w-6xl px-4\">\n      <div class=\"text-center mb-12\">\n        <h1 class=\"text-4xl font-bold tracking-tight text-zinc-900 dark:text-zinc-100 sm:text-5xl\">\n          Galeri\n        </h1>\n        <p class=\"mt-6 text-lg leading-8 text-zinc-600 dark:text-zinc-400\">\n          Piksel geçiş efektleriyle oluşturulmuş görseller.\n        </p>\n      </div>\n\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 place-items-center\">\n        <PixelTransition\n          v-for=\"item in galleryItems\"\n          :key=\"item.id\"\n          :grid-size=\"item.gridSize || 10\"\n          :pixel-color=\"item.pixelColor || '#1f2937'\" \n          :animation-step-duration=\"item.duration || 0.4\"\n          class-name=\"w-full h-auto shadow-lg\"\n          aspect-ratio=\"100%\" \n        >\n          <template #firstContent>\n            <img \n              :src=\"item.firstImage\"\n              :alt=\"item.altText || 'Galeri öğesi'\"\n              class=\"w-full h-full object-cover\"\n            />\n          </template>\n          <template #secondContent>\n            <div class=\"w-full h-full flex flex-col items-center justify-center p-4 bg-zinc-800 text-white\">\n              <h3 class=\"text-xl font-semibold mb-2\">{{ item.title }}</h3>\n              <p class=\"text-sm text-center\">{{ item.description }}</p>\n            </div>\n          </template>\n        </PixelTransition>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport PixelTransition from '~/components/PixelTransition.vue';\n\ninterface GalleryItem {\n  id: string;\n  firstImage: string;\n  title: string;\n  description: string;\n  altText?: string;\n  gridSize?: number;\n  pixelColor?: string;\n  duration?: number;\n}\n\nconst galleryItems = ref<GalleryItem[]>([\n  {\n    id: '1',\n    firstImage: 'https://source.unsplash.com/random/400x400?nature,water',\n    title: 'Doğa Harikası',\n    description: 'Suyun ve yeşilin muhteşem uyumu.',\n    altText: 'Doğa ve su manzarası',\n    gridSize: 12,\n    pixelColor: '#34d399', // Emerald\n    duration: 0.3\n  },\n  {\n    id: '2',\n    firstImage: 'https://source.unsplash.com/random/400x400?city,night',\n    title: 'Şehir Işıkları',\n    description: 'Geceleyin parlayan metropol.',\n    altText: 'Gece şehir manzarası',\n    gridSize: 8,\n    pixelColor: '#f59e0b', // Amber\n    duration: 0.5\n  },\n  {\n    id: '3',\n    firstImage: 'https://source.unsplash.com/random/400x400?technology,abstract',\n    title: 'Teknolojik Soyutlama',\n    description: 'Modern sanat ve teknoloji bir arada.',\n    altText: 'Teknolojik ve soyut görsel',\n    gridSize: 15,\n    pixelColor: '#60a5fa', // Blue\n    duration: 0.25\n  },\n  {\n    id: '4',\n    firstImage: 'https://source.unsplash.com/random/400x400?food,colorful',\n    title: 'Lezzet Şöleni',\n    description: 'Rengarenk ve iştah açıcı yiyecekler.',\n    altText: 'Renkli yiyecekler',\n    gridSize: 10,\n    pixelColor: '#f472b6', // Pink\n    duration: 0.4\n  },\n]);\n\ndefinePageMeta({\n  title: 'Galeri'\n});\n</script>\n\n<style scoped>\n/* Galeri sayfasına özel ek stiller gerekirse buraya eklenebilir */\n</style>\n"],"names":["className","aspectRatio","_ssrRenderAttrs","_mergeProps","_ssrRenderList","_push","_parent","_createVNode","_ssrInterpolate","_toDisplayString"],"mappings":";;;;;;;;;;;;;;;;AA8CA,UAAM,QAAQ;AASR,UAAA,eAAe,IAA2B,IAAI;AAC/B,QAA2B,IAAI;AAClC,QAA2B,IAAI;AAC1B,QAA4B,IAAI;AAEtC,QAAa,KAAK;AACb,QAAa,KAAK;AAExC,UAAM,cAAc,SAAS,MAAM,MAAM,KAAK;;;iBA7DtC;AAAA,QAAJ,KAAI;AAAA,QACH,OAAK;AAAA;UAAiJA,KAAS;AAAA;QAI/J,OAAO,YAAW;AAAA,8EAKQC,KAAW,YAAA,CAAA;;6FASpC,EAAsB,WAAA,OAAA,CAAA,CAAA,oBAAA;;;;;;;;;;;;;;;;;ACmC5B,UAAM,eAAe,IAAmB;AAAA,MACtC;AAAA,QACE,IAAI;AAAA,QACJ,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,QACT,UAAU;AAAA,QACV,YAAY;AAAA;AAAA,QACZ,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,IAAI;AAAA,QACJ,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,QACT,UAAU;AAAA,QACV,YAAY;AAAA;AAAA,QACZ,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,IAAI;AAAA,QACJ,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,QACT,UAAU;AAAA,QACV,YAAY;AAAA;AAAA,QACZ,UAAU;AAAA,MACZ;AAAA,MACA;AAAA,QACE,IAAI;AAAA,QACJ,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,aAAa;AAAA,QACb,SAAS;AAAA,QACT,UAAU;AAAA,QACV,YAAY;AAAA;AAAA,QACZ,UAAU;AAAA,MAAA;AAAA,IACZ,CACD;;AAhGM,YAAA,OAAAC,eAAAC,WAAA,EAAA,OAAM,oEAAgE,MAAA,CAAA,CAAA,ogBAAA;AAapDC,oBAAA,aAAA,QAAR,SAAI;;UACV,KAAK,KAAK;AAAA,UACV,aAAW,KAAK,YAAQ;AAAA,UACxB,eAAa,KAAK,cAAU;AAAA,UAC5B,2BAAyB,KAAK,YAAQ;AAAA,UACvC,cAAW;AAAA,UACX,gBAAa;AAAA,QAAA;UAEF,sBAAX,CAMW,GAAAC,QAAAC,UAAA,aAAA;;0CAJN,OAAK,KAAK,UAAU,kBACpB,OAAK,KAAK,WAAO,cAAA;;;gBAFpBC,YAIE,OAAA;AAAA,kBAHC,KAAK,KAAK;AAAA,kBACV,KAAK,KAAK,WAAO;AAAA,kBAClB,OAAM;AAAA;;;;UAGC,uBAAX,CAKW,GAAAF,QAAAC,UAAA,aAAA;;qNAHmCE,eAAA,KAAK,KAAK,mEAClBA,eAAA,KAAK,WAAW;;;gBAFpDD,YAGM,OAAA,EAHD,OAAM,wFAAoF;AAAA,kBAC7FA,YAA4D,QAAxD,OAAM,6BAAA,GAAgCE,gBAAA,KAAK,KAAK,GAAA,CAAA;AAAA,kBACpDF,YAAyD,OAAtD,OAAM,yBAAyBE,gBAAA,KAAK,WAAW,GAAA,CAAA;AAAA;;;;;;;;;;;;;;;;;;"}